import pandas as pd

data = pd.read_csv("data.csv")   #64개 학습데이터가 저장되어있는 데이터 읽어오기
data.shape

import numpy as np

eta = 0.2

w2_1 = np.random.normal(size=12) # 입력층에서 은닉층 1번으로의 가중치 12가지
w2_2 = np.random.normal(size=12) # 입력층에서 은닉층 2번으로의 가중치 12가지
w2_3 = np.random.normal(size=12) # 입력층에서 은닉층 3번으로의 가중치 12가지
w3_1 = np.random.normal(size=3) # 은닉층에서 출력층 1번으로의 가중치 3가지
w3_2 = np.random.normal(size=3) # 은닉층에서 출력층 2번으로의 가중치 3가지

b2 = np.random.normal(size=3) # 은닉층 3개 유닛의 편향 3가지
b3 = np.random.normal(size=2) # 출력층 2개 유닛의 편향 2가지

def sigmoid(z):  #시그모이드 함수를 활성화 함수로 사용
    return 1 / (1 +np.exp(-z))  

def dsigmoid(z):  #시그모이드 함수의 미분성질을 이용해 sigmoid'(z), dsigmoid 함수를 정의
    return sigmoid(z)*(1-sigmoid(z))  #시그모이드 함수의 미분성질을 이용해 sigmoid prime 값을 구한다.

TC_history = [0]*50  #TOTAL COST(비용의 총합)



for N in range(50): # 경사하강을 50번에 걸쳐 반복한다.

    dw2_1 = [0]*12
    dw2_2 = [0]*12
    dw2_3 = [0]*12
    dw3_1 = [0]*3
    dw3_2 = [0]*3
    db2 = [0]*3
    db3 = [0]*3
    TC = 0
    for idx, items in data.iterrows():

        x = items[:12].to_numpy()
        t1 = items.t1  #출력층에서 1번 유닛의 출력값  이미지가 0에 가까우면 1번 유닛이 1출력
        t2 = items.t2  #출력층에서 2번 유닛의 출력값  이미지가 1에 가까우면 2번 유닛이 1출력
        # 입력 x와 실젯값 t1, t2

        z2_1 = np.dot(w2_1,x)+b2[0]
        z2_2 = np.dot(w2_2,x)+b2[1]
        z2_3 = np.dot(w2_3,x)+b2[2]
        # z 값 ( 은닉층으로 입력될 값) 구하기

         # a는 z에 활성화함수.
        a2_1 = sigmoid(z2_1) 
        a2_2 = sigmoid(z2_2)
        a2_3 = sigmoid(z2_3)

        a2 = [a2_1,a2_2,a2_3]
        # 은닉층의 a값 구하기
        z3_1 = np.dot(w3_1,a2)+b3[0]
        z3_2 = np.dot(w3_2,a2)+b3[1]
        a3_1 = sigmoid(z3_1)
        a3_2 = sigmoid(z3_2)

        a3 = [a3_1,a3_2]
        # 출력층의 a값 구하기
        
        C = 0.5*( (t1 - a3[0])**2 + (t2 - a3[1])**2 )
        TC+= C
        # 비용 C 구하기

        delta3_1 = (a3[0]-t1) * dsigmoid(z3_1) # 시그모이드 함수의 미분 성질을 이용하여 식을 간단히 정리
        delta3_2 = (a3[1]-t2) * dsigmoid(z3_2)
        delta3 = [delta3_1, delta3_2]
        #delta 마지막 항 구하기

        delta2_1 = np.dot(delta3,[w3_1[0],w3_2[0]] ) * dsigmoid(z2_1)
        delta2_2 = np.dot(delta3,[w3_1[1],w3_2[1]] ) * dsigmoid(z2_2)
        delta2_3 = np.dot(delta3,[w3_1[2],w3_2[2]] ) * dsigmoid(z2_3)
        delta2 = [delta2_1, delta2_2, delta2_3]
        #출력층의 delta 를 이용해 오차역전파법으로 은닉층의 delta 구하기

        for i in range(12):
            dw2_1[i] += delta2_1*x[i]
            dw2_2[i] += delta2_2*x[i]
            dw2_3[i] += delta2_3*x[i]
        #입력층에서 은닉층으로의 36가지 가중치 편미분 값을 더해서 저장해둔다.

        for i in range(3):
            dw3_1[i] += delta3_1*a2[i]
            dw3_2[i] += delta3_2*a2[i]
        #출력층에서 은닉층으로의 6가지 가중치 편미분 값을 더해서 저장해둔다.

        db2[0] += delta2_1
        db2[1] += delta2_2
        db2[2] += delta2_3
        db3[0] += delta3_1
        db3[1] += delta3_2
        #은닉층과 출력층 5개 유닛의 편향 편미분 값을 더해서 저장해둔다.

    TC_history[N]= TC # 비용의 합을 저장해둔다.

    #64개 데이터에 대해 모든 편미분값들의 합을 구한 후, 이에 학습률을 곱하여 가중치와 편향들을 변화시킨다.
    for i in range(12):
        w2_1[i] += -eta*dw2_1[i]
        w2_2[i] += -eta*dw2_2[i]
        w2_3[i] += -eta*dw2_3[i]
        #입력층에서 은닉층으로의 36가지 가중치를 정답에 가까운 곳으로 변화시킨다.

    for i in range(3):
        w3_1[i] += -eta*dw3_1[i]
        w3_2[i] += -eta*dw3_2[i]
        #출력층에서 은닉층으로의 6가지 가중치를 정답에 가까운 곳으로 변화시킨다.
        b2[0] += -eta*b2[0]
        b2[1] += -eta*b2[1]
        b2[2] += -eta*b2[2]
        b3[0] += -eta*b3[0]
        b3[1] += -eta*b3[1]
    #은닉층, 출력층 5개 유닛의 편향을 정답에 가까운 곳으로 변화시킨다.

import matplotlib.pyplot as plt
plt.plot(TC_history)
plt.show
######TEST######
##기존 데이터에 없던 새로운 이미지 패턴##
test1 = [
        0,1,0,
        1,0,1,
        1,0,1,
        1,0,1
        ]
x = test1
# 입력 x와 실젯값 t1, t2
z2_1 = np.dot(w2_1,x)+b2[0]
z2_2 = np.dot(w2_2,x)+b2[1]
z2_3 = np.dot(w2_3,x)+b2[2]
# z 값 ( 은닉층으로의 입력될 값) 구하기

a2_1 = sigmoid(z2_1) # sigmoid는 z에 활성화함수.
a2_2 = sigmoid(z2_2)
a2_3 = sigmoid(z2_3)

a2 = [a2_1,a2_2,a2_3]
# 은닉층의 a값 구하기
z3_1 = np.dot(w3_1,a2)+b3[0]
z3_2 = np.dot(w3_2,a2)+b3[1]
a3_1 = sigmoid(z3_1)
a3_2 = sigmoid(z3_2)

print(a3_1)  ##출력층 1번 유닛 출력값
print(a3_2)  ##출력층 2번 유닛 출력값


##2번 테스트##
test2 = [
        0,1,1,
        0,1,0,
        0,1,0,
        0,1,0
        ]
x = test2
# 입력 x와 실젯값 t1, t2
z2_1 = np.dot(w2_1,x)+b2[0]
z2_2 = np.dot(w2_2,x)+b2[1]
z2_3 = np.dot(w2_3,x)+b2[2]
# z 값 ( 은닉층으로의 입력될 값) 구하기

a2_1 = sigmoid(z2_1) # a는 z에 활성화함수.
a2_2 = sigmoid(z2_2)
a2_3 = sigmoid(z2_3)

a2 = [a2_1,a2_2,a2_3]
# 은닉층의 a값 구하기
z3_1 = np.dot(w3_1,a2)+b3[0]
z3_2 = np.dot(w3_2,a2)+b3[1]
a3_1 = sigmoid(z3_1)
a3_2 = sigmoid(z3_2)

print(a3_1) ##출력층 1번 유닛 출력값
print(a3_2) ##출력층 2번 유닛 출력값
